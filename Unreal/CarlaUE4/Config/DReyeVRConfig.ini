; NOTE: this is a weird config file bc it is custom written for DReyeVR

; some serialization formats:
; FVector: (X=..., Y=..., Z=...) (along XYZ-axes)
; FRotator: (R=..., P=..., Y=...) (for roll, pitch, yaw)
; FTransform: (FVector | FRotator | FVector) = (X=..., Y=..., Z=... | R=..., P=..., Y=... | X=..., Y=..., Z=...)
; bool: True or False

[EgoVehicle]
DashLocation=(X=110.0, Y=0.0, Z=105.0); position offset of dash in vehicle
SpeedometerInMPH=True; set to False to use KPH
EnableTurnSignalAction=True; True to enable turn signal animation (& sound), else false
TurnSignalDuration=3.0; time (in s) that the turn signals stay on for
ActorRegistryID=501; desired (but not guaranteed) ID for the ActorRegistry (can be any nonzero number)
DrawDebugEditor=False; draw debug lines/sphere for eye gaze in the editor

[CameraPose]
; location & rotation of camera relative to vehicle (location units in cm, rotation in degrees)
StartingPose=DriversSeat; starting position of camera in vehicle (on begin play)
; NOTE: we assume the location is suffix'd with "Loc" and rotation is suffixed with "Rot"
DriversSeatLoc=(X=20.0, Y=-40.0, Z=120.0); location of first-person camera
DriversSeatRot=(R=0.0, P=0.0, Y=0.0); rotation of first-person camera
FrontLoc=(X=250.0, Y=0.0, Z=90.0); location of camera in front of vehicle
FrontRot=(R=0.0, P=0.0, Y=0.0); rotation of camera in front of vehicle
BirdsEyeViewLoc=(X=0.0, Y=0.0, Z=820.0); location of camera from top-down bird's eye view
BirdsEyeViewRot=(R=0.0, P=270.0, Y=0.0); rotation of camera from top-down bird's eye view
ThirdPersonLoc=(X=-500.0, Y=0.0, Z=380.0); location of camera in third-person view
ThirdPersonRot=(R=0.0, P=330.0, Y=0.0); rotation of camera in third-person view

[CameraParams]
FieldOfView=90.0; horizontal field of view
ScreenPercentage=100; 100% is native resolution, increase for supersampling, decrease for subsampling
; all the intensities range from [0 (off) to 1 (maximum)]
MotionBlurIntensity=0; how much motion blur in the camera
VignetteIntensity=0; how intense the vignetting is (darkened corners)
BloomIntensity=0; how intense the bloom is
SceneFringeIntensity=0; how intense the SceneFringe is
LensFlareIntensity=0; how intense the lens flares are
GrainIntensity=0; how intense the grain is

[Mirrors]
; rear view mirror
RearMirrorEnabled=True
RearMirrorChassisTransform=(X=48.0, Y=0.0, Z=123.0 | R=0.0, P=0.0, Y=25.06 | X=1.0, Y=1.0, Z=1.0)
RearMirrorTransform=(X=-0.5, Y=0.0, Z=0.0 | R=0.0, P=1.0, Y=0.0 | X=0.9, Y=0.98, Z=0.9)
RearReflectionTransform=(X=-7, Y=0.0, Z=0.0 | R=0.0, P=90.0, Y=0.0 | X=0.002, Y=0.007, Z=1.0)
RearScreenPercentage=85; used very frequently
; left view side mirror
LeftMirrorEnabled=True
LeftMirrorTransform=(X=62.0, Y=-98.0, Z=105.5 | R=0.0, P=0.0, Y=0.0 | X=0.9, Y=0.9, Z=0.9)
LeftReflectionTransform=(X=0, Y=0, Z=-3.0 | R=43.2, P=81, Y=22.5 | X=0.003, Y=0.005, Z=1.0)
LeftScreenPercentage=65; used quite a bit
; right view side mirror
RightMirrorEnabled=True
RightMirrorTransform=(X=62, Y=98, Z=100.5 | R=0, P=-4, Y=2.79 | X=0.9, Y=0.9, Z=0.9)
RightReflectionTransform=(X=0.0, Y=0.0, Z=2.22 | R=-1, P=90.0, Y=21.6 | X=0.003, Y=0.005, Z=1.0)
RightScreenPercentage=50; used very rarely if ever

[SteeringWheel]
InitLocation=(X=85.0, Y=-40.0, Z=85.0); position of the steering wheel in the vehicle
InitRotation=(R=0.0, P=-10.0, Y=0.0); tilt of the steering wheel at rest
MaxSteerAngleDeg=900; max wheel rotation in degrees (pos and negative)
MaxSteerVelocity=90; maximum velocity (degrees per second)
SteeringScale=360; scale with which to rotate the wheel (normalized [-1, 1] -> degrees)

[EgoSensor]
ActorRegistryID=502; desired (but not guaranteed) ID for the ActorRegistry (can be any nonzero number)
StreamSensorData=True; Set to False to skip streaming sensor data (for PythonAPI) on every tick
MaxTraceLenM=100.0; maximum trace length (in meters) to use for world-hit point calculation
DrawDebugFocusTrace=True; draw the debug focus trace & hit point in editor

[VehicleInputs]
ScaleSteeringDamping=0.6
ScaleThrottleInput=1.0
ScaleBrakeInput=1.0
InvertMouseY=False; use inverted-flight controls for moving camera with mouse inputs
ScaleMouseY=1.0
ScaleMouseX=1.0

[EgoVehicleHUD]
HUDScaleVR=6; scale all HUD elements in VR mode only
DrawFPSCounter=True; draw's FPS (frames per second) in top right corner of flat screen
DrawFlatReticle=True; reticle in flat-screen mode
DrawGaze=False; draw debug gaze lines on flat-screen hud
DrawSpectatorReticle=True; reticle in spectator mode during vr (VR spectator HUD only)
ReticleSize=100; diameter of reticle (thickness also scales)
EnableSpectatorScreen=True; whether or not to enable the flat-screen spectator when in VR

[Game]
AutomaticallySpawnEgo=True; use to spawn EgoVehicle, o/w defaults to spectator & Ego can be spawned via PythonAPI
DoSpawnEgoVehicleTransform=False; True uses the SpawnEgoVehicleTransform below, False uses Carla's own spawn points
SpawnEgoVehicleTransform=(X=3010, Y=390, Z=0.0 | R=0, P=0.0, Y=0 | X=1.0, Y=1.0, Z=1.0); This is only for Town03
EgoVolumePercent=100
NonEgoVolumePercent=100
AmbientVolumePercent=20

[Replayer]
CameraFollowHMD=True; Whether or not to have the camera pose follow the recorded HMD pose
RunSyncReplay=True; Whether or not to run the replayer exactly frame by frame (no interpolation)
RecordAllShaders=False; Enable or disable rendering the scene with additional (beyond RGB) shaders such as depth
RecordAllPoses=False; Enable or disable rendering the scene with all camera poses (beyond driver's seat)
RecordFrames=True; additionally capture camera screenshots on replay tick (requires RunSyncReplay=True)
FileFormatJPG=True; either JPG or PNG
LinearGamma=True; force linear gamme for frame capture render
FrameWidth=1280; resolution x for screenshot
FrameHeight=720; resolution y for screenshot
FrameDir=FrameCap; directory name for screenshot
FrameName=tick; title of screenshot (differentiated via tick-suffix)

[Hardware]
DeviceIdx=0; Device index of the hardware (Logitech has 2, can be 0 or 1)
LogUpdates=False; whether or not to print debug messages

[FoveatedRender]
Enabled=True
